using EduEngine;

namespace EduEngine
{
    internal static class KeyCodeExtentions
    {
        public static char ToChar(this KeyCode keyCode, bool shift = false)
        {
            return keyCode switch
            {
                KeyCode.A => shift ? 'A' : 'a',
                KeyCode.B => shift ? 'B' : 'b',
                KeyCode.C => shift ? 'C' : 'c',
                KeyCode.D => shift ? 'D' : 'd',
                KeyCode.E => shift ? 'E' : 'e',
                KeyCode.F => shift ? 'F' : 'f',
                KeyCode.G => shift ? 'G' : 'g',
                KeyCode.H => shift ? 'H' : 'h',
                KeyCode.I => shift ? 'I' : 'i',
                KeyCode.J => shift ? 'J' : 'j',
                KeyCode.K => shift ? 'K' : 'k',
                KeyCode.L => shift ? 'L' : 'l',
                KeyCode.M => shift ? 'M' : 'm',
                KeyCode.N => shift ? 'N' : 'n',
                KeyCode.O => shift ? 'O' : 'o',
                KeyCode.P => shift ? 'P' : 'p',
                KeyCode.Q => shift ? 'Q' : 'q',
                KeyCode.R => shift ? 'R' : 'r',
                KeyCode.S => shift ? 'S' : 's',
                KeyCode.T => shift ? 'T' : 't',
                KeyCode.U => shift ? 'U' : 'u',
                KeyCode.V => shift ? 'V' : 'v',
                KeyCode.W => shift ? 'W' : 'w',
                KeyCode.X => shift ? 'X' : 'x',
                KeyCode.Y => shift ? 'Y' : 'y',
                KeyCode.Z => shift ? 'Z' : 'z',
                KeyCode.A1 => shift ? '!' : '1',
                KeyCode.A2 => shift ? '@' : '2',
                KeyCode.A3 => shift ? '#' : '3',
                KeyCode.A4 => shift ? '$' : '4',
                KeyCode.A5 => shift ? '%' : '5',
                KeyCode.A6 => shift ? '^' : '6',
                KeyCode.A7 => shift ? '&' : '7',
                KeyCode.A8 => shift ? '*' : '8',
                KeyCode.A9 => shift ? '(' : '9',
                KeyCode.A0 => shift ? ')' : '0',
                KeyCode.MINUS => shift ? '_' : '-',
                KeyCode.EQUALS => shift ? '+' : '=',
                KeyCode.SEMICOLON => shift ? ':' : ';',
                KeyCode.APOSTROPHE => shift ? '|' : '\'',
                KeyCode.GRAVE => '`',
                KeyCode.COMMA => shift ? '<' : ',',
                KeyCode.PERIOD => shift ? '>' : '.',
                KeyCode.SLASH => shift ? '?' : '/',
                KeyCode.BACKSLASH => '\\',
                KeyCode.SPACE => ' ',
                _ => '\0',
            };
        }

        public static ImGuiNET.ImGuiKey ToImGuiKey(this KeyCode keyCode)
        {
            return keyCode switch
            {
                KeyCode.A => ImGuiNET.ImGuiKey.A,
                KeyCode.B => ImGuiNET.ImGuiKey.B,
                KeyCode.C => ImGuiNET.ImGuiKey.C,
                KeyCode.D => ImGuiNET.ImGuiKey.D,
                KeyCode.E => ImGuiNET.ImGuiKey.E,
                KeyCode.F => ImGuiNET.ImGuiKey.F,
                KeyCode.G => ImGuiNET.ImGuiKey.G,
                KeyCode.H => ImGuiNET.ImGuiKey.H,
                KeyCode.I => ImGuiNET.ImGuiKey.I,
                KeyCode.J => ImGuiNET.ImGuiKey.J,
                KeyCode.K => ImGuiNET.ImGuiKey.K,
                KeyCode.L => ImGuiNET.ImGuiKey.L,
                KeyCode.M => ImGuiNET.ImGuiKey.M,
                KeyCode.N => ImGuiNET.ImGuiKey.N,
                KeyCode.O => ImGuiNET.ImGuiKey.O,
                KeyCode.P => ImGuiNET.ImGuiKey.P,
                KeyCode.Q => ImGuiNET.ImGuiKey.Q,
                KeyCode.R => ImGuiNET.ImGuiKey.R,
                KeyCode.S => ImGuiNET.ImGuiKey.S,
                KeyCode.T => ImGuiNET.ImGuiKey.T,
                KeyCode.U => ImGuiNET.ImGuiKey.U,
                KeyCode.V => ImGuiNET.ImGuiKey.V,
                KeyCode.W => ImGuiNET.ImGuiKey.W,
                KeyCode.X => ImGuiNET.ImGuiKey.X,
                KeyCode.Y => ImGuiNET.ImGuiKey.Y,
                KeyCode.Z => ImGuiNET.ImGuiKey.Z,
                KeyCode.A1 => ImGuiNET.ImGuiKey._1,
                KeyCode.A2 => ImGuiNET.ImGuiKey._2,
                KeyCode.A3 => ImGuiNET.ImGuiKey._3,
                KeyCode.A4 => ImGuiNET.ImGuiKey._4,
                KeyCode.A5 => ImGuiNET.ImGuiKey._5,
                KeyCode.A6 => ImGuiNET.ImGuiKey._6,
                KeyCode.A7 => ImGuiNET.ImGuiKey._7,
                KeyCode.A8 => ImGuiNET.ImGuiKey._8,
                KeyCode.A9 => ImGuiNET.ImGuiKey._9,
                KeyCode.A0 => ImGuiNET.ImGuiKey._0,
                KeyCode.SPACE => ImGuiNET.ImGuiKey.Space,
                KeyCode.RETURN => ImGuiNET.ImGuiKey.Enter,
                KeyCode.BACK => ImGuiNET.ImGuiKey.Backspace,
                KeyCode.TAB => ImGuiNET.ImGuiKey.Tab,
                KeyCode.LSHIFT => ImGuiNET.ImGuiKey.ModShift,
                KeyCode.RSHIFT => ImGuiNET.ImGuiKey.ModShift,
                KeyCode.LCONTROL => ImGuiNET.ImGuiKey.ModCtrl,
                KeyCode.RCONTROL => ImGuiNET.ImGuiKey.ModCtrl,
                KeyCode.LWIN => ImGuiNET.ImGuiKey.ModSuper,
                KeyCode.RWIN => ImGuiNET.ImGuiKey.ModSuper,
                KeyCode.LMENU => ImGuiNET.ImGuiKey.ModAlt,
                KeyCode.RMENU => ImGuiNET.ImGuiKey.ModAlt,
                KeyCode.UP => ImGuiNET.ImGuiKey.UpArrow,
                KeyCode.DOWN => ImGuiNET.ImGuiKey.DownArrow,
                KeyCode.LEFT => ImGuiNET.ImGuiKey.LeftArrow,
                KeyCode.RIGHT => ImGuiNET.ImGuiKey.RightArrow,
                KeyCode.ESCAPE => ImGuiNET.ImGuiKey.Escape,
                KeyCode.CAPITAL => ImGuiNET.ImGuiKey.CapsLock,
                _ => ImGuiNET.ImGuiKey.None
            };
        }
    }
}
